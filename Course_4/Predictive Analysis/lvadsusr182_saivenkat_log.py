# -*- coding: utf-8 -*-
"""Lvadsusr182_SaiVenkat_log.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rtRIY8Dzc7KlPfla3AzURSHvEBS2xfN-
"""

import pandas as pd
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report,precision_score
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.preprocessing import StandardScaler
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.preprocessing import LabelEncoder
from sklearn.linear_model import LinearRegression

df=pd.read_csv('/content/booking.csv')

'''
Just for refernce
'''
def outliers_iqr(data):
    q1 = np.percentile(data, 25)
    q3 = np.percentile(data, 75)
    iqr = q3 - q1
    lower_bound = q1 - 1.5 * iqr
    upper_bound = q3 + 1.5 * iqr
    outliers = [x for x in data if x < lower_bound or x > upper_bound]
    return outliers
numerical_columns = df.select_dtypes(include=[np.number])
outliers_dict = {}
for col in numerical_columns.columns:
    outliers_dict[col] = outliers_iqr(df[col])
for col, outliers in outliers_dict.items():
    print("Outliers in column '{}': {}".format(col, outliers))

df.isnull().sum()

'''
dropping cloumns not needed
since booking id contains unique values only
'''
df=df.drop('Booking_ID',axis=1)

'''
Question-1
Handling mising values
found in room type and average price
'''
df['room type'].fillna(df['room type'].mode(),inplace=True)
df['average price'].fillna(df['average price'].mean(),inplace=True)

'''
Question-2
Ecoding categorical data
'''
le = LabelEncoder()
categorical_cols = ['type of meal', 'room type', 'market segment type','booking status','date of reservation']
for col in categorical_cols:
    df[col] = le.fit_transform(df[col])
numerical_col = df.select_dtypes(include=['float64', 'int64']).columns
scaler = StandardScaler()

'''
Question-3
Feature selection and drop duplicates
'''
df.drop_duplicates(inplace=True)
X = df.drop(['booking status'], axis=1)
y = df['booking status']

'''
Question-4
Splitting the data
for test and train
for evaluation
'''
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

'''
Question-5
Develop a logistic regression model
'''
scaler = StandardScaler()
x_train_scaled=scaler.fit_transform(X_train)
x_test_scaled=scaler.transform(X_test)
log_reg_model = LogisticRegression(max_iter=1000)
log_reg_model.fit(x_train_scaled,y_train)
y_pred = log_reg_model.predict(x_test_scaled)

'''
Question-6
enalizing all the
classification_matrix
'''
accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)
precision=precision_score(y_test, y_pred)
print("Precision:",precision)#once checking individual precision score
print(classification_report(y_test, y_pred))
print(confusion_matrix(y_test, y_pred))