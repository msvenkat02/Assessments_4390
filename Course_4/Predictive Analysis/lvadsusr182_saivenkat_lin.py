# -*- coding: utf-8 -*-
"""Lvadsusr182_SaiVenkat_lin.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1M1S6k4wnY7NaxDwk-Ro8X506z5SgdC9j
"""

import pandas as pd
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.preprocessing import StandardScaler
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.preprocessing import LabelEncoder
from sklearn.linear_model import LinearRegression

df=pd.read_csv('/content/expenses.csv')

df.info()

#Question1
df.isnull().sum()

'''Question-1 Part -1
filling the null values in
bmi cloumn since null values
are found in bmi cloumns
'''
df['bmi'].fillna(df['bmi'].mean(),inplace=True)

'''
Question-1 Part 2
Managing the outliers in the dataset
'''
def outliers_iqr(data):
    q1 = np.percentile(data, 25)
    q3 = np.percentile(data, 75)
    iqr = q3 - q1
    lower_bound = q1 - 1.5 * iqr
    upper_bound = q3 + 1.5 * iqr
    outliers = [x for x in data if x < lower_bound or x > upper_bound]
    df_proper= df[(df['bmi']>lower_bound) & (df['bmi']<upper_bound)]
    return outliers
numerical_columns = df.select_dtypes(include=[np.number])
outliers_dict = {}
for col in numerical_columns.columns:
    outliers_dict[col] = outliers_iqr(df[col])
for col, outliers in outliers_dict.items():
    print("Outliers in column '{}': {}".format(col, outliers))

'''
Question-2
for conversion of categorical into numerical'''
le = LabelEncoder()
categorical_cols = ['sex', 'smoker', 'region']
for col in categorical_cols:
    df[col] = le.fit_transform(df[col])
numerical_col = df.select_dtypes(include=['float64', 'int64']).columns
scaler = StandardScaler()

'''
Question-3
Feature selection,since we need to predict the charge
from the data we take x and y as the following
and the data is cleaned
'''
X = df.drop(['charges'], axis=1)
y = df['charges']

'''
Question-4
data splitting from the x and y above we are splitting the data using
train_test_split
'''
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

'''
Question-5 model development for
linear regression
'''
lin_reg_model = LinearRegression()
lin_reg_model.fit(X_train, y_train)
y_pred = lin_reg_model.predict(X_test)

'''
Question-6
Evaluation
'''
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)
print("Mean Squared Error:", mse)
print("R^2 Score:", r2)