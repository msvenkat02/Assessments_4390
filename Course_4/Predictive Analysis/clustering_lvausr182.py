# -*- coding: utf-8 -*-
"""Clustering_LVAUSR182.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CRa3Qb_ri2Ful0W02XXVMrbp2bBHzWkx
"""

import pandas as pd
from sklearn.preprocessing import StandardScaler,LabelEncoder
from sklearn.cluster import KMeans
from sklearn.decomposition import PCA
import matplotlib.pyplot as plt
import seaborn as sns

df=pd.read_csv('/content/Mall_Customers.csv')

df.head()

df.info()

df.isna().sum()

'''
Question-2.a
handling missing values ,
performing eda
'''
df['Annual Income (k$)'].fillna(df['Annual Income (k$)'].mean(),inplace=True)
#missing values found in annual income columns
corr = df.corr(numeric_only= True)
sns.heatmap(corr,annot=True)
df.duplicated().sum()
#no duplicates are found
le=LabelEncoder()
df['Gender']=le.fit_transform(df['Gender'])

'''
Question-2.b
cluster determination
'''
columns_for_clustering = ['Gender','Age','Annual Income (k$)','Spending Score (1-100)']
X = df[columns_for_clustering]
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)
#doing elbow method and finding the bent
#to determine number of clusters
wc = []
for i in range(1, 11):
    kmeans = KMeans(n_clusters=i, init='k-means++', random_state=42)
    kmeans.fit(X_scaled)
    wc.append(kmeans.inertia_)

plt.figure(figsize=(10, 6))
plt.plot(range(1, 11), wc, marker='o', linestyle='--')
plt.title('Elbow_Method')
plt.xlabel('No of Clusters')
plt.ylabel('WCSS')
plt.xticks(range(1, 11))
plt.grid(True)
plt.show()
#Silhouette score
from sklearn.metrics import silhouette_score
sse = []
sil_score=[]
k_nrg=range(1,10)
for k in range(1,10):
   kmeans = KMeans(n_clusters=k)
   kmeans.fit(df)
   sse.append(kmeans.inertia_)
   if k>=2:
    x=silhouette_score(df, kmeans.fit_predict(df))
    sil_score.append(x)
plt.xlabel('K')
plt.ylabel('Sum of squared error')
plt.plot(sse)
plt.show()
plt.xlabel('K')
plt.ylabel('Silhouette Score')
plt.plot(range(2,10),sil_score,color='red')
plt.show()

'''
Question-2.C
Implement k means algorithm
'''
n_clusters = 3
kmeans = KMeans(n_clusters=n_clusters, init='k-means++', random_state=42)
kmeans.fit(X_scaled)

df['Cluster'] = kmeans.labels_
#print("\nClustered Dataset:")
#print(df[['country', 'Cluster']])

'''
Question-2.D
Cluster analysis
'''
kmeans = KMeans(n_clusters=4, init='k-means++', random_state=42)
kmeans.fit(X_scaled)
labels = kmeans.labels_
centers = kmeans.cluster_centers_
plt.figure(figsize=(8, 6))
plt.scatter(X_scaled[:, 3], X_scaled[:, 1], c=labels, cmap='viridis', s=50, alpha=0.5)
plt.title('K-means Clustering')
plt.xlabel('X1')
plt.ylabel('X2')
plt.legend()
plt.grid(True)
plt.show()