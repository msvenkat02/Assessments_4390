# -*- coding: utf-8 -*-
"""Classification.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WHIdC5mLh1BwTBbDS0C4I6MGE4Y8fe__
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report,precision_score
from sklearn.preprocessing import LabelEncoder, StandardScaler

df=pd.read_csv('/content/winequality-red.csv')

df.head()

df.isna().sum()

'''
Question-1.A
Handling missing values
and outliers of data
'''

df['fixed acidity'].fillna(
df['fixed acidity'].mean(),inplace=True)
df['volatile acidity'].fillna(df['volatile acidity'].mean(),inplace=True)
df['citric acid'].fillna(df['citric acid'].mean(),inplace=True)
df['residual sugar'].fillna(df['residual sugar'].mean(),inplace=True)
df['chlorides'].fillna(df['chlorides'].mean(),inplace=True)
df['free sulfur dioxide'].fillna(df['free sulfur dioxide'].mean(),inplace=True)
df['sulphates'].fillna(df['sulphates'].mean(),inplace=True)

df.info()

'''
Question-1.B
all the data is in numeric therefore there is no ned to transform the data
'''

'''
Question-1.C
all the values are numerical
there is no need for label encoding
for reference done one column
'''
le=LabelEncoder()
df['fixed acidity']=le.fit_transform(df['fixed acidity'])

'''
Question-1.D
feature selection and
remove duplicates
'''
df=df.drop_duplicates()
df.duplicated().sum()

X = df.drop('quality', axis=1)
y = df['quality']

'''
Question-1.E
Data splitting into test and train
'''
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

'''
Question-1.F
Implement Random forest classifier and testing the accuracy
'''
scaled=StandardScaler()
X_train_scaled=scaled.fit_transform(X_train)
X_test_scaled=scaled.transform(X_test)
rf_classifier = RandomForestClassifier(random_state=42)
rf_classifier.fit(X_train_scaled, y_train)
y_pred = rf_classifier.predict(X_test_scaled)


accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)

'''
Question-1.G
calculating all metrics along with
classification_report
'''
print("Classification Report: ",classification_report(y_test, y_pred))