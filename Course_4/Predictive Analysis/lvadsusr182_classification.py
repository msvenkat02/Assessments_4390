# -*- coding: utf-8 -*-
"""LVADSUSR182_Classification.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1b1LWEIsnBbupwatB4alIq8VholUAytfu
"""

#SOLVING THIS USING 'XGBClassifier'
import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from xgboost import XGBClassifier
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.preprocessing import StandardScaler
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.preprocessing import LabelEncoder
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestClassifier

df=pd.read_csv('/content/penguins_classification_fa.csv')

df.isna().sum()

#Removing null values in the column
df['bill_depth_mm'].fillna(df['bill_length_mm'].mean(),inplace=True)

#finding duplicates
df.duplicated().sum()

#Variate Analysis
for column in df.select_dtypes(include=['object']).columns:
    plt.figure(figsize=(10, 5))
    df[column].value_counts().plot(kind='bar')
    plt.title(f'Bar Chart of {column}')
    plt.xlabel(column)
    plt.ylabel('Count')
    plt.show()

#for finding outliers
numerical_columns = df.select_dtypes(include=['float64', 'int64']).columns

for column in numerical_columns:
    plt.figure(figsize=(10, 6))
    sns.boxplot(x=df[column])
    plt.title(f'Box Plot of {column}')
    plt.xlabel(column)
    plt.show()

#there seems to be no outliers

#Label encoding
le = LabelEncoder()
categorical_cols = ['species', 'island']
for col in categorical_cols:
    df[col] = le.fit_transform(df[col])

#defining features
X = df.drop(['species'], axis=1)
y = df['species']

# Using test and train split and splitting the data and scaling
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
scaler = StandardScaler()
X_train_scaled=scaler.fit_transform(X_train)
X_test_scaled=scaler.fit_transform(X_test)

# using model XGBoost
model = XGBClassifier()
model.fit(X_train_scaled, y_train)
y_pred = model.predict(X_test_scaled)

accuracy = accuracy_score(y_test, y_pred)
print("\nAccuracy:", accuracy)
print("\nClassification Report:")
print(classification_report(y_test, y_pred))

#Using logistic regression model
model1 = LogisticRegression(random_state=42)
model1.fit(X_train_scaled, y_train)
y_pred = model1.predict(X_test_scaled)
accuracy1 = accuracy_score(y_test, y_pred)
print("\nAccuracy:", accuracy)
print("\nClassification Report:")
print(classification_report(y_test, y_pred))

model2 = RandomForestClassifier(random_state=42)
model2.fit(X_train_scaled, y_train)
y_pred = model2.predict(X_test_scaled)
accuracy2 = accuracy_score(y_test, y_pred)
print("\nAccuracy:", accuracy)
print("\nClassification Report:")
print(classification_report(y_test, y_pred))

